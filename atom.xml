<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DurriyaDo</title>
  
  <subtitle>花开堪折直须折，                     莫待无花空折枝！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-24T03:54:19.630Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>DurriyaDo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 下新建用户且设置新用户权限</title>
    <link href="http://yoursite.com/2020/06/24/Linux-%E4%B8%8B%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94%E8%AE%BE%E7%BD%AE%E6%96%B0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2020/06/24/Linux-%E4%B8%8B%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94%E8%AE%BE%E7%BD%AE%E6%96%B0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</id>
    <published>2020-06-24T03:54:19.000Z</published>
    <updated>2020-06-24T03:54:19.630Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux下借助anaconda创建自己的虚拟环境</title>
    <link href="http://yoursite.com/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2020-06-22T14:21:48.000Z</published>
    <updated>2020-06-30T14:29:44.438Z</updated>
    
    <content type="html"><![CDATA[<p>概要：刚重装linux系统，发现没装anaconda，于是从装anaconda开始、进而创建自己的虚拟环境。<br><a id="more"></a></p><h1 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h1><p>1） 首先清华镜像站 下载anaconda3。 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/1.png" alt></p><p>2） 复制到/home/username 目录下<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/2.png" alt></p><p>3） 在文件目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></p><p>4） 根据提示输入完成安装：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/3.png" alt><br>此处点击Enter</p><p>5） 出现注册表信息：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.png" alt><br>在此点击Enter</p><p>6） 阅读完信息之后，出现提示:<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/5.png" alt><br>输入”yes”</p><p>7）提醒你安装位置：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/6.png" alt><br>此处点击Enter</p><p>8）提醒你是否将anaconda加入环境变量：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/7.png" alt><br>此处点击”yes”</p><p>9）提醒你是否安装VScode:<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/8.png" alt><br>此处点击”no”(我们多半借用pycharm作为IDE(集成开发环境)，当然这里大家可以根据自己的需要选择是否安装VScode.)</p><p>10）安装到这里，打开终端，输入python，发现用的是Ubuntu系统的python，而不是anaconda自带的python版本。可以进行以下操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/xupp/anaconda3/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><br>再在终端输入python，终端的默认 python 为 anaconda了，设置成功，至此全部完成。<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/9.png" alt></p><h2 id="上述过程中遇到的问题"><a href="#上述过程中遇到的问题" class="headerlink" title="上述过程中遇到的问题"></a>上述过程中遇到的问题</h2><p>由于我之前自己创建了独立的账号，在进行上述最后一步时，报错： IBUS-WARNING **: 23:18:11.359: The owner of /home/dn/.config/ibus/bus is not root!</p><p>这是因为在修改系统文件时我们不能使用sudo命令去修改，必须使用系统内置的管理员权限。最简单的方法是使用gksudo命令启用root编辑或是sudo -i 切换。</p><h2 id="sudo-i"><a href="#sudo-i" class="headerlink" title="sudo -i"></a>sudo -i</h2><p>sudo -i是Linux终端命令下改变用户对命令使用权限的命令。<br>sudo -i是Linux终端命令下改变用户对命令使用权限的命令，例如，在Linux命令终端中，开始为“user@ubuntu:~$”,当使用该命令后，会出现输入密码的提示，之后输入密码，就会变为“root@ubuntu:~#”，这样就是改变了用户对一些命令的权限。</p><h2 id="sudo-i后怎么退到user用户"><a href="#sudo-i后怎么退到user用户" class="headerlink" title="sudo -i后怎么退到user用户"></a>sudo -i后怎么退到user用户</h2><p>命令进行后，输入exit即可注销。</p><h1 id="在anaconda下创建自己的环境"><a href="#在anaconda下创建自己的环境" class="headerlink" title="在anaconda下创建自己的环境"></a>在anaconda下创建自己的环境</h1><p>如何为每一个工程单独建立环境，这是我们训练代码者常做的一项任务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n M3D python=3.5</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate M3D</span><br></pre></td></tr></table></figure><p>安装torch工具包：<br>通常在终端安装torch包需要花费很长时间，所以我们最好借用清华镜像channel来实现：（最后一句针对你环境所用的cuda版本安装对应版本的torch包，注意你在安装或者更新torch时，里面会帮你安装或者更新cudnn）</p><p>先查看cuda版本（可以看到是的cuda=10.2）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/<span class="built_in">local</span>/cuda/version.txt (或者nvcc -V)</span><br></pre></td></tr></table></figure><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/10.png" alt></p><p>查看是否有torch包：<br>进去python：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br></pre></td></tr></table></figure><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/11.png" alt><br>说明没有安装torch工具包。</p><p>再来安装torch包(最后一句以后换别的版本也是通用的，注意改下版本就行)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conda install pytorch torchvision cudatoolkit=10.2</span><br></pre></td></tr></table></figure><br>查看修改是否成功，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.condarc</span><br></pre></td></tr></table></figure><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/12.png" alt></p><p>不过我注意到，他在替换我的python版本：3.7-&gt;3.6，这里没有影响（涉及到cuda和cudnn的替换和更新就要注意一下，不然系统容易emmmm你懂的。。。），所以我选择的yes。<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/13.png" alt></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>这里其实安装有问题，我以为可以默认他的python3.6替代3.7，但是一直安装torch（cudatoolkit）不成功,并且报错：<br>ERROR conda.core.link:_execute(502): An error occurred while installing package ‘<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge::olefile-0.46-py_0" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge::olefile-0.46-py_0</a>‘. FileNotFoundError(2, “No such file or directory: ‘/home/dn/anaconda3/bin/python3.6’”) Att<br>开始我以为是3.6没替换成功，后来试了很多遍也用了很多方法，都是这个问题。（在这个尝试的过程中，所以改装的包都下载成功了，但是import之后发现，全部还是之前anaconda中的包，下载的没有安装上。想删除之前缓存的包：conda clean —all ）</p><h1 id="正确的做法是先创建虚拟环境："><a href="#正确的做法是先创建虚拟环境：" class="headerlink" title="正确的做法是先创建虚拟环境："></a>正确的做法是先创建虚拟环境：</h1><p>创建一个虚拟环境，这是推荐的做法，在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n YOLOv4 python=3.6</span><br></pre></td></tr></table></figure><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/14.png" alt></p><p>这就创建了一个名为YOLOv4，python版本为3.6的虚拟环境。于是我们可以把YOLOv4安装在这个环境下面。首先我们激活这个环境：source activate YOLOv4<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate YOLOv4(或者conda activate YOLOv4)</span><br></pre></td></tr></table></figure><br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/15.png" alt></p><h2 id="在Pytorch官网-https-pytorch-org-，根据自己的机器配置选择对应的安装命令。"><a href="#在Pytorch官网-https-pytorch-org-，根据自己的机器配置选择对应的安装命令。" class="headerlink" title="在Pytorch官网 https://pytorch.org/ ，根据自己的机器配置选择对应的安装命令。"></a>在Pytorch官网 <a href="https://pytorch.org/" target="_blank" rel="noopener">https://pytorch.org/</a> ，根据自己的机器配置选择对应的安装命令。</h2><p><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/16.png" alt></p><p>按照上面的步骤先安装完清华镜像之后，在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conda install pytorch torchvision cudatoolkit=10.2</span><br></pre></td></tr></table></figure><br>（注意，在官网中，是：conda install pytorch torchvision cudatoolkit=10.2 -c pytorch，经过试验后发现去掉后面的-c pytorch，速度比加上-c pytorch 以及用pip安装的方式  快100+倍以上哈哈哈哈哈哈哈哈哈。）<br>安装成功：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/17.png" alt></p><h2 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h2><p>在测试cudnn时（cat  /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2），发现没有安装。<br>1）于是进入cudnn官网：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，下载压缩包文件<br>cuDNN Library for Linux，终端输入以下指令解压：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz</span><br></pre></td></tr></table></figure><br>下载好后的tgz文件和解压后的目录：<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/18.png" alt><br>2) 复制文件<br>终端输入以下命令将文件复制到CUDA中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">$ sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">$ sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure></p><p>复制后即完成cudnn安装</p><p>3) 验证是否成功<br>终端输入：cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 ，如下显示即安装成功<br><img src="/2020/06/22/Linux%E4%B8%8B%E5%80%9F%E5%8A%A9anaconda%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/19.png" alt></p><p>可以开始享受你的代码训练之旅了 :) ！！！</p><p>参考文献：<br><a href="https://blog.csdn.net/hou9021/article/details/104311088" target="_blank" rel="noopener">https://blog.csdn.net/hou9021/article/details/104311088</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概要：刚重装linux系统，发现没装anaconda，于是从装anaconda开始、进而创建自己的虚拟环境。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="anaconda" scheme="http://yoursite.com/tags/anaconda/"/>
    
      <category term="虚拟环境" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Nowcoder-Java-刷题笔记-持续更新</title>
    <link href="http://yoursite.com/2020/06/17/Nowcoder-Java-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2020/06/17/Nowcoder-Java-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</id>
    <published>2020-06-17T15:07:56.000Z</published>
    <updated>2020-06-17T15:17:59.808Z</updated>
    
    <content type="html"><![CDATA[<p>概要：今天开始总结java学习中的一些基本题目，先从基础题目开始，后续涉及到项目类的题目有时间再总结。用到的软件工具是</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;概要：今天开始总结java学习中的一些基本题目，先从基础题目开始，后续涉及到项目类的题目有时间再总结。用到的软件工具是&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Nowcoder" scheme="http://yoursite.com/tags/Nowcoder/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo d失败 以及 Github网页无法访问</title>
    <link href="http://yoursite.com/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</id>
    <published>2020-06-12T03:25:50.000Z</published>
    <updated>2020-06-12T05:15:55.737Z</updated>
    
    <content type="html"><![CDATA[<p>昨天写笔记的时候，上传博客的时候出了点问题。具体来说，hexo g和hexo s都没有问题，但是hexo d的时候报错了。<br><a id="more"></a></p><h1 id="hexo-d失败"><a href="#hexo-d失败" class="headerlink" title="hexo d失败"></a>hexo d失败</h1><p>失败原因：<br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/1.png" alt></p><p>我开始以为是deploy插件出了问题，于是重新安装了一遍，但是并不能解决这问题。然后一直显示连接超时，但是hexo g和hexo s都没有问题，我就猜想是不是连接到github上的问题。<br>于是打开github官网，一直显示网页无法显示。当时以为网不好，隔了一天再打开时，还是无法访问。确定是github网页的问题。</p><h1 id="github-网页无法访问"><a href="#github-网页无法访问" class="headerlink" title="github 网页无法访问"></a>github 网页无法访问</h1><p>找了很多方法，大多是修改hosts文件解决问题。</p><h2 id="如何获得修改hosts文件的权限"><a href="#如何获得修改hosts文件的权限" class="headerlink" title="如何获得修改hosts文件的权限"></a>如何获得修改hosts文件的权限</h2><p>一般，因为权限问题，无法直接打开hosts文件。我的方法如下：<br>windows下找到文件路径：C:\Windows\System32\drivers\etc，进行如下步骤：<br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/2.png" alt></p><p>在powershell中输入cmd回车，然后输入notepad hosts，即可修改hosts文件了，修改之后点击“文件”-&gt;“保存”，就可以成功修改并且保存了。</p><h2 id="应该如何修改hosts内容"><a href="#应该如何修改hosts内容" class="headerlink" title="应该如何修改hosts内容"></a>应该如何修改hosts内容</h2><p>1,键入网址：<br><a href="http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo" target="_blank" rel="noopener">http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo</a><br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/3.png" alt></p><p>2，在上一步的hosts文件中输入这个IP地址：<br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/4.png" alt><br>！！！注意要把之前的github.com注释掉，我因为看漏了这里的地址，一直没成功。<br>同时为了加快github上传速度，可以将之前在hosts文件中其他的网址部分注释掉。</p><h2 id="刷新网络DNS缓存"><a href="#刷新网络DNS缓存" class="headerlink" title="刷新网络DNS缓存"></a>刷新网络DNS缓存</h2><p>打开dos窗口，执行：ipconfig /flushdns</p><p>现在可以打开 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 啦！Enjoy it!<br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/5.png" alt></p><p>然后hexo d成功了！又可以上传笔记文件啦！<br><img src="/2020/06/12/hexo-d%E5%A4%B1%E8%B4%A5-%E4%BB%A5%E5%8F%8A-Github%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/5.png" alt></p><p>欢迎来踩：<a href="https://durriyado.github.io/" target="_blank" rel="noopener">https://durriyado.github.io/</a></p><p>参考链接：<br><a href="https://blog.csdn.net/VariatioZbw/article/details/106632744" target="_blank" rel="noopener">https://blog.csdn.net/VariatioZbw/article/details/106632744</a><br><a href="https://www.cnblogs.com/onelikeone/p/12791969.html" target="_blank" rel="noopener">https://www.cnblogs.com/onelikeone/p/12791969.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天写笔记的时候，上传博客的时候出了点问题。具体来说，hexo g和hexo s都没有问题，但是hexo d的时候报错了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="网页无法访问" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Nowcoder-Python-刷题笔记-持续更新</title>
    <link href="http://yoursite.com/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</id>
    <published>2020-06-10T08:24:33.000Z</published>
    <updated>2020-06-17T09:31:56.393Z</updated>
    
    <content type="html"><![CDATA[<p>概要：今天开始总结python3学习中的一些基本题目，先从基础题目开始，后续涉及到项目类的题目有时间再总结。没有提前装python的同学先在电脑上安装python3，然后在终端看是否安装好。<br>我之前一般使用Atom或者Notepad++编写代码，但是需要安装插件。也可使用VSCode或者pycharm，不过开启时间或稍长，且界面没有Atom和Notepad++那么舒服。<br>个人认为，学习一门编程语言，我自己做过太多弯路，感觉一直在学，但似乎总是没学到东西。所以学习语言，就是要不断的长期的反复的接触它、练习它，才能留下更加深刻的印象。<br><a id="more"></a></p><p>我使用Notepad++编写代码，需要提前配置插件。使用链接：<a href="https://www.php.cn/tool/notepad/428854.html" target="_blank" rel="noopener">https://www.php.cn/tool/notepad/428854.html</a><br>(使用Atom的同学，可以在setting中install中搜索atom-python-run安装，成功之后，执行代码直接按F5。）</p><h1 id="helloworld实例"><a href="#helloworld实例" class="headerlink" title="helloworld实例"></a>helloworld实例</h1><p>题目：如何输出”Hello World!”<br>编程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/1.png" alt></p><h1 id="数字求和"><a href="#数字求和" class="headerlink" title="数字求和"></a>数字求和</h1><p>题目：通过用户输入两个数字，并计算两个数字之和<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num0 = input(<span class="string">"请输入第一个数字"</span>)</span><br><span class="line">num1 = input(<span class="string">"请输入第二个数字"</span>)</span><br><span class="line">sum = num0 + num1</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br></pre></td></tr></table></figure></p><p>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/2.png" alt><br>原因：<br>没有定义输入类型，被当作字符串连接。</p><p>改进：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num0 = input(<span class="string">"请输入第一个数字"</span>)</span><br><span class="line">num1 = input(<span class="string">"请输入第二个数字"</span>)</span><br><span class="line">sum = int(num0) + int(num1)</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/3.png" alt><br>成功！</p><h1 id="数求平方根"><a href="#数求平方根" class="headerlink" title="数求平方根"></a>数求平方根</h1><p>题目：通过用户输入一个数字，并计算这个数字的平方根。如：数学语言为：√￣16=4。<br>思路：运用sqrt函数。<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = input(<span class="string">"请输入数字: "</span>)</span><br><span class="line"><span class="keyword">if</span> (num &gt; 0):</span><br><span class="line">    root = sqrt(num)</span><br><span class="line">    <span class="built_in">print</span>(root)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字输入不正确，请重新输入！"</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/4.png" alt><br>原因：<br>num没有定义类型</p><p>改进1：<br>将 num&gt;0 改为 int(num)&gt;0<br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/5.png" alt><br>原因：<br>sqrt不是现成函数。</p><p>改进2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int(num) = input(<span class="string">"请输入数字: "</span>)</span><br><span class="line"><span class="keyword">if</span> (num &gt; 0):</span><br><span class="line">    root = num ** 0.5</span><br><span class="line">    <span class="built_in">print</span>(root)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字输入不正确，请重新输入！"</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/6.png" alt><br>原因：定义类型位置错误</p><p>改进3：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"请输入数字: "</span>))</span><br><span class="line"><span class="keyword">if</span> (num &gt; 0):</span><br><span class="line">    root = num ** 0.5</span><br><span class="line">    <span class="built_in">print</span>(root)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字输入不正确，请重新输入！"</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/7.png" alt></p><p>官方答案：<br>程序只适用于正数。负数和复数可以使用以下的方式：<br>导入复数数学模块,使用了cmath.sqrt()函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line">num = int(input(<span class="string">"请输入一个数字： "</span>))</span><br><span class="line">root = cmath.sqrt(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0&#125; 的平方根为 &#123;1:0.3f&#125;+&#123;2:0.3f&#125;j'</span>.format(num,root.real,root.imag))</span><br></pre></td></tr></table></figure><br>输出：（注意print中浮点数的格式）<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/8.png" alt></p><h1 id="二次方程"><a href="#二次方程" class="headerlink" title="二次方程"></a>二次方程</h1><p>通过用户输入数字，并计算二次方程：<br>二次方程式 ax**2 + bx + c = 0（a、b、c 用户提供，为实数，a ≠ 0）</p><p>思路：使用求根公式<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">float</span>(input(<span class="string">"请输入a:"</span>))</span><br><span class="line">b = <span class="built_in">float</span>(input(<span class="string">"请输入b:"</span>))</span><br><span class="line">c = <span class="built_in">float</span>(input(<span class="string">"请输入c:"</span>))</span><br><span class="line"></span><br><span class="line">d = cmath.sqrt(b*b - 4*a*c)</span><br><span class="line">root1 = (-b + d) / 2*a</span><br><span class="line">root2 = (-b - d) / 2*a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'方程&#123;0&#125;x**2 + &#123;1&#125;x + &#123;2&#125; = 0的解为：&#123;3:0.3f&#125;和&#123;4:0.3f&#125;'</span>.format(a,b,c,root1,root2))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/9.png" alt><br>原因：<br>不允许在复杂格式说明符中填充零<br>（注意此处和上一题的不同之处，因为开平方根中含有实部和虚部，即root1和root2均含两项，所以只用0.3f是不正确的。）</p><p>改进：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">float</span>(input(<span class="string">"请输入a:"</span>))</span><br><span class="line">b = <span class="built_in">float</span>(input(<span class="string">"请输入b:"</span>))</span><br><span class="line">c = <span class="built_in">float</span>(input(<span class="string">"请输入c:"</span>))</span><br><span class="line"></span><br><span class="line">d = cmath.sqrt(b*b - 4*a*c)</span><br><span class="line">root1 = (-b + d) / 2*a</span><br><span class="line">root2 = (-b - d) / 2*a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'方程&#123;0&#125;x**2 + &#123;1&#125;x + &#123;2&#125; = 0的解为：&#123;3&#125;和&#123;4&#125;'</span>.format(a,b,c,root1,root2))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/10.png" alt><br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/11.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line"> </span><br><span class="line">a = <span class="built_in">float</span>(input(<span class="string">'输入 a: '</span>))</span><br><span class="line">b = <span class="built_in">float</span>(input(<span class="string">'输入 b: '</span>))</span><br><span class="line">c = <span class="built_in">float</span>(input(<span class="string">'输入 c: '</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line">d = (b**2) - (4*a*c)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 两种求解方式</span></span><br><span class="line">sol1 = (-b-cmath.sqrt(d))/(2*a)</span><br><span class="line">sol2 = (-b+cmath.sqrt(d))/(2*a)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'结果为 &#123;0&#125; 和 &#123;1&#125;'</span>.format(sol1,sol2))</span><br></pre></td></tr></table></figure></p><h1 id="计算三角形的面积"><a href="#计算三角形的面积" class="headerlink" title="计算三角形的面积"></a>计算三角形的面积</h1><p>题目：用户输入三角形三边长度，并计算三角形的面积：<br>思路：三角形面积计算公式<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line"></span><br><span class="line">a = int(input(<span class="string">"请输入第一条边边长："</span>))</span><br><span class="line">b = int(input(<span class="string">"请输入第二条边边长："</span>))</span><br><span class="line">c = int(input(<span class="string">"请输入第三条边边长："</span>))</span><br><span class="line"></span><br><span class="line">d = (a + b + c)/2</span><br><span class="line"></span><br><span class="line">s = (d * (d<span class="_">-a</span>) * (d-b) * (d-c))**0.5</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"由&#123;0&#125;、&#123;1&#125;、&#123;2&#125;组成的三角形面积为：&#123;3&#125;"</span>.format(a,b,c,s))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/12.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(input(<span class="string">'输入三角形第一边长: '</span>))</span><br><span class="line">b = <span class="built_in">float</span>(input(<span class="string">'输入三角形第二边长: '</span>))</span><br><span class="line">c = <span class="built_in">float</span>(input(<span class="string">'输入三角形第三边长: '</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 计算半周长</span></span><br><span class="line">s = (a + b + c) / 2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 计算面积</span></span><br><span class="line">area = (s*(s<span class="_">-a</span>)*(s-b)*(s-c)) ** 0.5</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'三角形面积为 %0.2f'</span> %area)</span><br></pre></td></tr></table></figure></p><h1 id="计算圆的面积"><a href="#计算圆的面积" class="headerlink" title="计算圆的面积"></a>计算圆的面积</h1><p>圆的面积公式为 ：S = πr^2，公式中 r 为圆的半径。<br>编程：</p><h2 id="直接写"><a href="#直接写" class="headerlink" title="直接写"></a>直接写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import cmath</span><br><span class="line">r = <span class="built_in">float</span>(input(<span class="string">"请输入圆的半径： "</span>))</span><br><span class="line">PI = 3.14</span><br><span class="line">s = PI * r * r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"半径为&#123;0&#125;的圆的面积为&#123;1:0.3f&#125;"</span>.format(r,s))</span><br></pre></td></tr></table></figure><p>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/13.png" alt></p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def circle_area(r):</span><br><span class="line">    PI = 3.14</span><br><span class="line">    s = PI * r * r</span><br><span class="line">    <span class="built_in">return</span> s </span><br><span class="line">    </span><br><span class="line"><span class="comment">#调用方法</span></span><br><span class="line">a = int(input(<span class="string">"请输入半径："</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"面积为：%0.2f"</span> %circle_area(a))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/14.png" alt><br>原因：</p><p>改进：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def circle_area(r):</span><br><span class="line">    PI = 3.14</span><br><span class="line">    s = PI * r * r</span><br><span class="line">    <span class="built_in">return</span> s </span><br><span class="line">    </span><br><span class="line"><span class="comment">#调用方法</span></span><br><span class="line">r = int(input(<span class="string">"请输入半径："</span>)</span><br><span class="line">area = circle_area(r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"面积为：%0.2f"</span> %area)</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/15.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个方法来计算圆的面积</span></span><br><span class="line">def findArea(r):</span><br><span class="line">    PI = 3.142</span><br><span class="line">    <span class="built_in">return</span> PI * (r*r)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"圆的面积为 %.6f"</span> % findArea(5))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/16.png" alt></p><h2 id="Q-想要通过输入半径、同时使用函数调用的方法应该是怎样呢？"><a href="#Q-想要通过输入半径、同时使用函数调用的方法应该是怎样呢？" class="headerlink" title="Q:想要通过输入半径、同时使用函数调用的方法应该是怎样呢？"></a>Q:想要通过输入半径、同时使用函数调用的方法应该是怎样呢？</h2><h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><p>题目：生成 0 ~ 9 之间的随机数<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.randint(0,9))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/17.png" alt><br>原因：文件名和函数包random同名，改一下文件名即可。</p><p>改进：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/18.png" alt><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/19.png" alt></p><h1 id="将摄氏温度转华氏温度："><a href="#将摄氏温度转华氏温度：" class="headerlink" title="将摄氏温度转华氏温度："></a>将摄氏温度转华氏温度：</h1><p>思路：摄氏温度转华氏温度的公式为 celsius * 1.8 = fahrenheit - 32<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">celsius= <span class="built_in">float</span>(input(<span class="string">"请输入摄氏温度："</span>))</span><br><span class="line">fahreheit = celsius * 1.8 + 32</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"&#123;0&#125;对应的华氏温度为&#123;1&#125;。"</span>.format(celsius,fahreheit))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/20.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">celsius = <span class="built_in">float</span>(input(<span class="string">'输入摄氏温度: '</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算华氏温度</span></span><br><span class="line">fahrenheit = (celsius * 1.8) + 32</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%0.1f 摄氏温度转为华氏温度为 %0.1f '</span> %(celsius,fahrenheit))</span><br></pre></td></tr></table></figure></p><h1 id="通过用户输入两个变量，并相互交换"><a href="#通过用户输入两个变量，并相互交换" class="headerlink" title="通过用户输入两个变量，并相互交换"></a>通过用户输入两个变量，并相互交换</h1><p>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">"请输入x的值： "</span>)</span><br><span class="line">y = input(<span class="string">"请输入y的值： "</span>)</span><br><span class="line"></span><br><span class="line">t = x</span><br><span class="line">x = y</span><br><span class="line">y = t</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x交换之后的值为：&#123;0&#125;，y交换之后的值为：&#123;1&#125;"</span>.format(x,y))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/21.png" alt><br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/22.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">'输入 x 值: '</span>)</span><br><span class="line">y = input(<span class="string">'输入 y 值: '</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建临时变量，并交换</span></span><br><span class="line">temp = x</span><br><span class="line">x = y</span><br><span class="line">y = temp</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'交换后 x 的值为: &#123;&#125;'</span>.format(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'交换后 y 的值为: &#123;&#125;'</span>.format(y))</span><br></pre></td></tr></table></figure></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>这里没有定义变量x,y类型可行</p><h1 id="使用-if…elif…else-语句判断数字是正数、负数或零"><a href="#使用-if…elif…else-语句判断数字是正数、负数或零" class="headerlink" title="使用 if…elif…else 语句判断数字是正数、负数或零"></a>使用 if…elif…else 语句判断数字是正数、负数或零</h1><p>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = (input(<span class="string">"请输入一个数字："</span>))</span><br><span class="line"><span class="keyword">if</span> (a &gt; 0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为正数"</span>.format(a))</span><br><span class="line"><span class="keyword">elif</span> (a &lt; 0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为负数"</span>.format(a))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为零"</span>.format(a))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/23.png" alt><br>原因：没有定义a的类型</p><p>改进：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(input(<span class="string">"请输入一个数字："</span>))</span><br><span class="line"><span class="keyword">if</span> (a &gt; 0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为正数"</span>.format(a))</span><br><span class="line"><span class="keyword">elif</span> (a &lt; 0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为负数"</span>.format(a))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为零"</span>.format(a))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/24.png" alt></p><p>官方答案1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">float</span>(input(<span class="string">"输入一个数字: "</span>))</span><br><span class="line"><span class="keyword">if</span> num &gt; 0:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"正数"</span>)</span><br><span class="line"><span class="keyword">elif</span> num == 0:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"零"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"负数"</span>)</span><br></pre></td></tr></table></figure><br>官方答案2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">float</span>(input(<span class="string">"输入一个数字: "</span>))</span><br><span class="line"><span class="keyword">if</span> num &gt;= 0:</span><br><span class="line">   <span class="keyword">if</span> num == 0:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">"零"</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">"正数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"负数"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips:"></a>Tips:</h2><p>if …else…语句中条件语句不用括号括起来也可。</p><h1 id="判断字符串是否为数字-※"><a href="#判断字符串是否为数字-※" class="headerlink" title="判断字符串是否为数字(※)"></a>判断字符串是否为数字(※)</h1><p>通过创建自定义函数 is_number() 方法来判断字符串是否为数字：<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def is_number(s):</span><br><span class="line">    try:</span><br><span class="line">        <span class="built_in">float</span>(s)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    except ValueError:</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    try:</span><br><span class="line">        import unicodedata</span><br><span class="line">        unicodedata.numeric(s)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    except (TypeError, ValueError):</span><br><span class="line">        pass </span><br><span class="line">        </span><br><span class="line">    <span class="built_in">return</span> False</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试字符串和数字</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'apple'</span>))</span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'222'</span>))</span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'-3'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试Unicode</span></span><br><span class="line"><span class="comment"># 泰语 2</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'๒'</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 中文数字</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'四'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 版权号</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'©'</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/25.png" alt></p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def is_number(s):</span><br><span class="line">    try:</span><br><span class="line">        <span class="built_in">float</span>(s)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    except ValueError:</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line">    try:</span><br><span class="line">        import unicodedata</span><br><span class="line">        unicodedata.numeric(s)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    except (TypeError, ValueError):</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> False</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试字符串和数字</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'foo'</span>))   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'1'</span>))     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'1.3'</span>))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'-1.37'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'1e3'</span>))   <span class="comment"># True</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试 Unicode</span></span><br><span class="line"><span class="comment"># 阿拉伯语 5</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'٥'</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 泰语 2</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'๒'</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 中文数字</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'四'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 版权号</span></span><br><span class="line"><span class="built_in">print</span>(is_number(<span class="string">'©'</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><h1 id="判断奇数偶数"><a href="#判断奇数偶数" class="headerlink" title="判断奇数偶数"></a>判断奇数偶数</h1><p>题目：判断一个数字是否为奇数或偶数<br>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">'请输入一个整数：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num % 2 == 0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为偶数"</span>.format(num))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为奇数"</span>.format(num))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/26.png" alt></p><h1 id="判断用户输入的年份是否为闰年"><a href="#判断用户输入的年份是否为闰年" class="headerlink" title="判断用户输入的年份是否为闰年"></a>判断用户输入的年份是否为闰年</h1><p>编程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">"请输入年份："</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year % 400 ==0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为闰年。"</span>.format(year))</span><br><span class="line"><span class="keyword">elif</span> (year % 100 != 0)&amp;(year % 4 ==0):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;为闰年。"</span>.format(year))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;&#125;不是闰年。"</span>.format((year))</span><br></pre></td></tr></table></figure><br>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/27.png" alt><br>原因：？？？</p><p>官方答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">"输入一个年份: "</span>))</span><br><span class="line"><span class="keyword">if</span> (year % 4) == 0:</span><br><span class="line">   <span class="keyword">if</span> (year % 100) == 0:</span><br><span class="line">       <span class="keyword">if</span> (year % 400) == 0:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">"&#123;0&#125; 是闰年"</span>.format(year))   <span class="comment"># 整百年能被400整除的是闰年</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">"&#123;0&#125; 不是闰年"</span>.format(year))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">"&#123;0&#125; 是闰年"</span>.format(year))       <span class="comment"># 非整百年能被4整除的为闰年</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"&#123;0&#125; 不是闰年"</span>.format(year))</span><br></pre></td></tr></table></figure></p><p>输出：<br><img src="/2020/06/10/Nowcoder-Python-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/28.png" alt></p><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS:"></a>TIPS:</h1><p>1,关于print的输出格式：如果该语句中含有多个变量输出，则应该使用’{}、{}…’.format()的组合形式;如果只用一个变量输出，则可以使用’%0.3f’ %veriable的形式（也可用’%0.3f %0.3f’ %(v1,v2)）。<br>2,输出语句中，不建议把计算公式直接写入其中，即直接将结果变量写在print语句中。<br>3，定义函数的方法：def 函数名（输入变量）…… return xxx 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概要：今天开始总结python3学习中的一些基本题目，先从基础题目开始，后续涉及到项目类的题目有时间再总结。没有提前装python的同学先在电脑上安装python3，然后在终端看是否安装好。&lt;br&gt;我之前一般使用Atom或者Notepad++编写代码，但是需要安装插件。也可使用VSCode或者pycharm，不过开启时间或稍长，且界面没有Atom和Notepad++那么舒服。&lt;br&gt;个人认为，学习一门编程语言，我自己做过太多弯路，感觉一直在学，但似乎总是没学到东西。所以学习语言，就是要不断的长期的反复的接触它、练习它，才能留下更加深刻的印象。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Nowcoder" scheme="http://yoursite.com/tags/Nowcoder/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>各大远程连接工具的用途</title>
    <link href="http://yoursite.com/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/"/>
    <id>http://yoursite.com/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/</id>
    <published>2020-06-08T10:37:20.000Z</published>
    <updated>2020-06-10T08:50:48.909Z</updated>
    
    <content type="html"><![CDATA[<p>背景：烦得很，电脑很多文件传输的软件工具，今天登陆实验室的远程服务器发现在官网下载cuda速度奇慢，于是改用传输工具传输文件，各种都试了，干脆做个归类和总结。<br><a id="more"></a></p><h1 id="Teamviewer"><a href="#Teamviewer" class="headerlink" title="Teamviewer"></a>Teamviewer</h1><p>1，坑，记得最早之前使用TV是不用注册账号的。现在不仅需要注册账号，每次登录都巨慢。没用两次之后，还被检测出商业用途，登进去就闪退。罢了罢了，网上的很多方法都试了不管用。某宝买了个破解版。</p><p>2，前面说到，远程服务器下载cuda巨慢，于是先在笔记本下好了（其实也慢，连上了学校的EasyConnet，用VPN快多了。）然后点击“传输文件”：1.4G的cuda大概需要传送3个多小时。。。（平时的TV应该等不了这么久就会自动断掉，可见一个稳定版的TV有多重要！）</p><p><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/1.png" alt></p><h1 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h1><p>这是最早下载的一个文件传输软件之一。<br>优点：直观。可以直接拖拉文件进行传输。</p><p>缺点：我在WinSCP没有用过类似于SSH命令传输过文件；大文件传输速度慢，同样传输1.4G的文件，需要5+小时。</p><p><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/2.png" alt></p><p><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/3.png" alt></p><h1 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a>Putty</h1><p>开始看网上教程是想用putty中的ssh指令传输的，于是想试试。<br>缺点：只能类似ssh的指令传输，不能文件拖拉传输。<br><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/4.png" alt></p><h1 id="MobaXteam"><a href="#MobaXteam" class="headerlink" title="MobaXteam"></a>MobaXteam</h1><p>同样可以用于文件传输。<br>优点：各种协议可供使用。<br>以SSH为例：只用指令传输；<br><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/5.png" alt></p><p>以SFTP为例：直接拖拉左边本地文件到右边远程，直接文件传输。<br><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/6.png" alt></p><p>缺点：传输速度慢。</p><h1 id="总结：使用ssh命令传输文件的指令："><a href="#总结：使用ssh命令传输文件的指令：" class="headerlink" title="总结：使用ssh命令传输文件的指令："></a>总结：使用ssh命令传输文件的指令：</h1><p>由于上述能够使用ssh指令的工具包括：putty、MobaXteam。但是我们输入ip、端口号之后，进入界面，会依次输入login as: (远程的username)、password，此时出现下面所示，表示已经进入远程服务器：<br><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/7.png" alt></p><p><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/8.png" alt></p><h2 id="本地-笔记本-终端-cmd-方法："><a href="#本地-笔记本-终端-cmd-方法：" class="headerlink" title="本地(笔记本)终端 cmd 方法："></a>本地(笔记本)终端 cmd 方法：</h2><p>（默认端口号是22，如果要改的话，需要加上-P 端口号 ）<br>1) 从本地文件夹（笔记本）上传到远程服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2022 G:/cuda_8.0.44_linux.run username@118.xxx.xx.xxx:/home/...</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/08/%E5%90%84%E5%A4%A7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94/9.png" alt></p><p>2) 从远程服务器上下载到笔记本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp username@118.xxx.xx.xxx:/home/...  G:/cuda_8.0.44_linux.run</span><br></pre></td></tr></table></figure></p><h2 id="远程服务器终端-putty-mobaxterm-方法："><a href="#远程服务器终端-putty-mobaxterm-方法：" class="headerlink" title="远程服务器终端 putty/mobaxterm 方法："></a>远程服务器终端 putty/mobaxterm 方法：</h2><p>（我从putty/mobaxterm进入到远程服务器其实就相当于本人在远程服务器面前，此时远程服务器就是“本地”。）<br>1）从笔记本上传文件到服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 19788@10.xxx.xx.xxx:G:/cuda_8.0.44_linux.run  /home/... （本地指的是服务器）</span><br></pre></td></tr></table></figure></p><p>2）从服务器下载到笔记本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /home/...  19788@10.xxx.xx.xxx:G:/cuda_8.0.44_linux.run  （本地指的是服务器）</span><br></pre></td></tr></table></figure></p><p>如果是传送文件夹的话，要在scp后面加上-r </p><p>参考文献：<a href="https://www.cnblogs.com/magicc/p/6490566.html" target="_blank" rel="noopener">https://www.cnblogs.com/magicc/p/6490566.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：烦得很，电脑很多文件传输的软件工具，今天登陆实验室的远程服务器发现在官网下载cuda速度奇慢，于是改用传输工具传输文件，各种都试了，干脆做个归类和总结。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Teamviewer" scheme="http://yoursite.com/tags/Teamviewer/"/>
    
      <category term="winscp" scheme="http://yoursite.com/tags/winscp/"/>
    
      <category term="mobaxterm" scheme="http://yoursite.com/tags/mobaxterm/"/>
    
      <category term="putty" scheme="http://yoursite.com/tags/putty/"/>
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
      <category term="远程连接" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="文件传输" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
      <category term="ssh指令" scheme="http://yoursite.com/tags/ssh%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>远程连接-代码调试-Pycharm</title>
    <link href="http://yoursite.com/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/"/>
    <id>http://yoursite.com/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/</id>
    <published>2020-05-29T02:56:08.000Z</published>
    <updated>2020-05-29T03:44:41.519Z</updated>
    
    <content type="html"><![CDATA[<p>背景：使用Pycharm，实现本地文件和远程文件的同步以及远程调试。<br><a id="more"></a></p><h1 id="Way1-直接配置解释器"><a href="#Way1-直接配置解释器" class="headerlink" title="Way1 直接配置解释器"></a>Way1 直接配置解释器</h1><p>使用服务器调试Python程序的前提时在服务器上安装了Python解释器，若没安装，请先安装。<br>（建议当远程服务器有多个用户同时使用时，在anaconda的envs下创建自己的环境）</p><h2 id="将Python解释器设置为远程服务器上的"><a href="#将Python解释器设置为远程服务器上的" class="headerlink" title="将Python解释器设置为远程服务器上的"></a>将Python解释器设置为远程服务器上的</h2><p>在菜单栏，File -&gt; Settings… -&gt; Project ×× -&gt; Project Interpreter，点击右侧 Add按钮，添加解释器。<br><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/1.png" alt></p><p>选择SSH Interpreter，填写服务器的 Host 地址，端口Port，用户名Username，填好下一步Next。<br><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/2.png" alt></p><p>填写远程服务器的密码 Password，下一步Next。<br><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/3.png" alt></p><p>选择远程服务器上Python解释器的位置，服务器上的远程同步文件夹Sync folders，可以选择多个。如果不知道Python安装在哪，可以远程连接服务器后，使用 命令 which python 找到Python安装位置。<br><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/4.png" alt></p><p>Finish，配置结束。该项目现在使用的就是远程服务器上的Python解释器了。以后的项目若想/不想使用该解释器，手动更改解释器即可。</p><h2 id="使用远程解释器运行本地Python程序"><a href="#使用远程解释器运行本地Python程序" class="headerlink" title="使用远程解释器运行本地Python程序"></a>使用远程解释器运行本地Python程序</h2><p>我们在运行程序是可能需要连接远程服务器，并且远程服务器的shell命令行的操作，所以我们也可以通过pycharm里面的工具进行远程服务器的终端的打开。<br><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/5.png" alt></p><h2 id="本地查看远程文件夹目录"><a href="#本地查看远程文件夹目录" class="headerlink" title="本地查看远程文件夹目录"></a>本地查看远程文件夹目录</h2><p><img src="/2020/05/29/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95-Pycharm/6.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：使用Pycharm，实现本地文件和远程文件的同步以及远程调试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="远程连接" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="代码调试" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/"/>
    
      <category term="Pycharm" scheme="http://yoursite.com/tags/Pycharm/"/>
    
  </entry>
  
  <entry>
    <title>远程连接-文件同步-VScode</title>
    <link href="http://yoursite.com/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/"/>
    <id>http://yoursite.com/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/</id>
    <published>2020-05-26T15:46:20.000Z</published>
    <updated>2020-06-23T13:13:25.445Z</updated>
    
    <content type="html"><![CDATA[<p>背景：使用SFTP协议的情况下，使用vscode实现本地文件和远程文件的同步。<br><a id="more"></a></p><h1 id="左方拓展栏搜索-“SFTP”"><a href="#左方拓展栏搜索-“SFTP”" class="headerlink" title="左方拓展栏搜索 “SFTP”"></a>左方拓展栏搜索 “SFTP”</h1><p><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/1.png" alt></p><h1 id="打开sftp-json文件"><a href="#打开sftp-json文件" class="headerlink" title="打开sftp.json文件"></a>打开sftp.json文件</h1><p>先在vscode中创建（打开）要远程的项目，快捷键win+shift+p 打开命令：输入：sftp  即可在该项目的根目录下生成.vscode的文件夹，并生成了一个sftp.json的文件。配置如下：<br>重要的主要是host、username、password以及 remotePath四个参数：<br>host：工作站的IP地址<br>port：ssh的端口<br>username：工作站自己的用户名<br>password：工作站自己的用户密码<br>protocol：协议类型，默认选”sftp”<br>remotePath：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名（即当地文件工程名和远程文件工程名相同，外部的目录不必一模一样，也做不到一模一样。。。<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/2.png" alt></p><h1 id="同步全部的工程文件"><a href="#同步全部的工程文件" class="headerlink" title="同步全部的工程文件"></a>同步全部的工程文件</h1><p>同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:local -&gt; remote，即可同步到远程服务器。<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/3.png" alt></p><h1 id="同步单一的文件"><a href="#同步单一的文件" class="headerlink" title="同步单一的文件"></a>同步单一的文件</h1><p>同步单一的文件，在以在需要同步的文件上右键，选择SFTP:Upload，即可同步到远程服务器。<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/4.png" alt></p><h1 id="二次链接"><a href="#二次链接" class="headerlink" title="二次链接"></a>二次链接</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>在上述情况弄好的情况下，再次调试时，可以遵循以下步骤：<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/5.png" alt><br>当这里出现一个绿色对勾时，表示已经成功连接上。<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/6.png" alt></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="可以在此处看到本地和远程的插件安装情况"><a href="#可以在此处看到本地和远程的插件安装情况" class="headerlink" title="可以在此处看到本地和远程的插件安装情况"></a>可以在此处看到本地和远程的插件安装情况</h3><p><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/7.png" alt></p><h3 id="正常连接好的情况是这样的"><a href="#正常连接好的情况是这样的" class="headerlink" title="正常连接好的情况是这样的"></a>正常连接好的情况是这样的</h3><p><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/8.png" alt></p><h3 id="调试远程代码"><a href="#调试远程代码" class="headerlink" title="调试远程代码"></a>调试远程代码</h3><p>File-&gt; open folder -&gt; 找到你要运行的远程目录下的工程-&gt; OK -&gt;载入文件如下：-&gt; 打开终端，发现是远程终端（下下图），成功！可以开始调试了！<br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/9.png" alt><br><img src="/2020/05/26/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5-vscode/10.png" alt></p><h1 id="免密操作"><a href="#免密操作" class="headerlink" title="免密操作"></a>免密操作</h1><p>最简单的一篇参考这个：<a href="https://blog.csdn.net/zhangpeterx/article/details/97375233" target="_blank" rel="noopener">https://blog.csdn.net/zhangpeterx/article/details/97375233</a></p><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS:"></a>TIPS:</h1><p>参考链接：<a href="https://blog.csdn.net/sunny327/article/details/81866785" target="_blank" rel="noopener">https://blog.csdn.net/sunny327/article/details/81866785</a><br><a href="https://www.jianshu.com/p/0f2fb935a9a1" target="_blank" rel="noopener">https://www.jianshu.com/p/0f2fb935a9a1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：使用SFTP协议的情况下，使用vscode实现本地文件和远程文件的同步。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="远程连接" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="VScode" scheme="http://yoursite.com/tags/VScode/"/>
    
      <category term="文件同步" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Windows问题-找不到支持windows hello指纹的指纹识别器</title>
    <link href="http://yoursite.com/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/"/>
    <id>http://yoursite.com/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/</id>
    <published>2020-05-21T14:49:11.000Z</published>
    <updated>2020-05-23T03:54:45.134Z</updated>
    
    <content type="html"><![CDATA[<p>配置：DELL笔记本; Windows10<br>问题：由于电脑这段时间一直在自动更新，今天开电脑的时候，突然发现之前指纹解锁的选项没有了。只能通过PIN和密码进入。<br><a id="more"></a></p><h1 id="Way1-查看源头"><a href="#Way1-查看源头" class="headerlink" title="Way1:查看源头"></a>Way1:查看源头</h1><p><img src="/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/1.png" alt><br>点击“了解更多信息”，只是进入了Windows官网，没有什么用。</p><h1 id="Way2-DELL官网-下载相应驱动"><a href="#Way2-DELL官网-下载相应驱动" class="headerlink" title="Way2:DELL官网 下载相应驱动"></a>Way2:DELL官网 下载相应驱动</h1><p>由于我是DELL电脑，登录官网寻找相应驱动：<a href="https://www.dell.com/support/home/cn/zh/cndhs1/Products/?app=drivers" target="_blank" rel="noopener">https://www.dell.com/support/home/cn/zh/cndhs1/Products/?app=drivers</a> 会自动弹出你的笔记本型号<br>    <img src="/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/2.png" alt><br>点击右方客服图标<br>    <img src="/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/3.png" alt><br>选择“电源与启动”、点击“对话”<br>    <img src="/2020/05/21/Windows%E9%97%AE%E9%A2%98-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%94%AF%E6%8C%81windows-hello%E6%8C%87%E7%BA%B9%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%99%A8/4.png" alt><br>会有人工客服与你对话，速度很快，告诉他你的型号和你的问题即可</p><p>然后会给你一个连接 <a href="https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=5t68t&amp;oscode=wt64a&amp;productcode=inspiron-14-5488-laptop" target="_blank" rel="noopener">https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=5t68t&amp;oscode=wt64a&amp;productcode=inspiron-14-5488-laptop</a> ，点击新页面中的“下载文件”，即为指纹驱动</p><p>安装在除了C盘之外的任意盘，安装完成之后重启电脑，即可看到多出了“指纹解锁”的选项。</p><p>这时，直接贴上自己的指纹，一样可以解锁，说明系统没有忘记之前录过的指纹！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置：DELL笔记本; Windows10&lt;br&gt;问题：由于电脑这段时间一直在自动更新，今天开电脑的时候，突然发现之前指纹解锁的选项没有了。只能通过PIN和密码进入。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="指纹识别" scheme="http://yoursite.com/tags/%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>YOLOv4:Optimal Speed and Accuracy of Object Detection阅读笔记</title>
    <link href="http://yoursite.com/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-17T07:23:23.000Z</published>
    <updated>2020-05-29T02:37:23.110Z</updated>
    
    <content type="html"><![CDATA[<p>论文： <a href="https://arxiv.org/pdf/2004.10934.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/2004.10934.pdf</a><br>代码： <a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">https://github.com/AlexeyAB/darknet</a><br><a id="more"></a></p><p>总结：速度差不多的精度碾压，精度差不多的速度碾压！YOLOv4是各种调优方法的集大成者，由最好的配置组成。</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>有许多功能可以提高卷积神经网络（CNN）的准确性。需要在大型数据集上对这些特征的组合进行实际测试，并对结果进行理论证明。一些功能仅在某些模型上运行，并且仅在某些问题上运行，或者仅在小规模数据集上运行； 而某些功能（例如批归一化和残差连接）适用于大多数模型，任务和数据集。我们假设此类通用功能包括加权残差连接（WRC），跨阶段部分连接（CSP），跨小批量标准化（CmBN），自对抗训练（SAT）和Mish激活函数。我们使用以下新功能：WRC，CSP，CmBN，SAT，Mish激活，Mosaic数据增强，DropBlock正则化和CIoU_loss，并结合使用其中的一些功能以实现最新的结果：43.5％的AP（65.7% AP50 在Tesla V100上，MS COCO数据集的实时速度约为65 FPS)。<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1.png" alt></p><h1 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce:"></a>Introduce:</h1><p>作者都用了哪些调优手段：<br>Weighted-Residual-Connections<em> 加权残差链接<br>​Cross-Stage-Partial-connections</em> 跨阶段部分连接<br>​Cross mini-Batch Normalization 跨小批量标准化<br>​Self-adversarial-training<em> 自对抗训练<br>​Mish activation</em>          Mish激活<br>​Mosaic data augmentation<em> 马赛克数据增强<br>​DropBlock regularization</em> DropBlock正则化<br>​CIoU loss*                CIoU损失</p><p>这篇文章的贡献如下:</p><p>开发了一个高效、强大的目标检测模型。它使每个人都可以使用1080 Ti或2080 TiGPU来训练一个超级快速和准确的目标探测器。</p><p>验证了在检测器训练过程中，最先进的Bag-of-Freebies和Bag-of-Specials 的目标检测方法的影响。</p><p>修改了最先进的方法，使其更有效，更适合于单GPU训练，包括CBN、PAN、SAM等。</p><h1 id="Relate-Works"><a href="#Relate-Works" class="headerlink" title="Relate Works"></a>Relate Works</h1><p>作者对现有目标检测算法进行了总结：<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2.png" alt><br>目前检测器通常可以分为以下几个部分，不管是two-stage还是one-stage都可以划分为如下结构，只不过各类目标检测算法设计改进侧重在不同位置：<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/3.png" alt></p><p>作者把所有的调优手段分为了两大类“Bag of freebies（免费礼包）”和“Bag of specials（特价包）”。</p><h2 id="Bag-of-freebies："><a href="#Bag-of-freebies：" class="headerlink" title="Bag of freebies："></a>Bag of freebies：</h2><p>是指在离线训练阶段为了提升精度而广泛使用的调优手段，而这种技巧并不在推断中使用，不会增加推断时间。<br>1）数据类：<br>数据增强（random erase/CutOut/hide-and-seek/grid mask/MixUp/CutMix/GAN）<br>数据分布：two-stage的有难例挖掘，one-stage的有focal loss。</p><p>2）特征图类：<br>DropOut/DropConnect/DropBlock</p><p>3）Bounding Box目标函数类：<br>MSE/ IoU loss/l1、l2 loss/GIoU loss/DIoU loss/CIoU loss</p><p><strong>YOLOv4 - use：</strong><br>1)主干网络：<br>​<em>CutMix and Mosaic data augmentation</em>、<br>DropBlock regularization、<br>Class label smoothing、<br>2)检测端：<br>CIoU-loss、<br><em>CmBN</em>、<br><em>Self-Adversarial Training</em>、<br><em>Eliminate grid sensitivity</em>、<br>Using multiple anchors for a single ground truth、<br>Cosine annealing scheduler、模拟余弦退火<br>Optimal hyperparameters、<br>Random training shapes。</p><h2 id="Bag-of-specials："><a href="#Bag-of-specials：" class="headerlink" title="Bag of specials："></a>Bag of specials：</h2><p>是指在推断过程中增加的些许成本但能换来较大精度提升的技巧。</p><p>1）增大感受野类：<br>SPP/ASPP/RFB</p><p>2）注意力类：<br>Squeeze-and-Excitation (SE)/Spatial Attention Module (SAM)</p><p>3）特征集成类：<br>SFAM/ASFF/BiFPN</p><p>4）激活函数类：<br>ReLu/LReLU/PReLU/ReLU6/Scaled ExponentialLinear Unit (SELU)/Swish/hard-Swish/Mish </p><p>5）后处理类：<br>soft NMS/DIoU NMS </p><p><strong>YOLOv4 - use：</strong><br>1)主干网络：<br>Mish activation、<br>CSP、(跨阶段部分连接)<br>MiWRC、<br>2）检测端：<br>SPP-block、<br>SAM、(Spatial Attention Module)<br>PAN、<br>DIoU-NMS</p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>​    在ILSVRC2012 (ImageNet)数据集上的分类任务，CSPResNext50要比CSPDarknet53好得多。然而，在COCO数据集上的检测任务，CSP+Darknet53比CSPResNext50更好。</p><p>​backbone：CSP+Darknet53</p><p>​additional module：SPP</p><p>​neck：PANet    </p><p>​head：YOLOv3 (anchor based)</p><p>新增改进：<br>为了使检测器更适合于单GPU上的训练，做了如下补充设计和改进:</p><p>​1、引入了一种新的数据增强方法Mosaic和自对抗训练(SAT)</p><p>​2、在应用遗传算法的同时选择最优超参数</p><p>​3、修改了一些现有的方法，如：SAM，PAN，CmBN</p><h1 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h1><h2 id="实验建立"><a href="#实验建立" class="headerlink" title="实验建立"></a>实验建立</h2><p>在ImageNet图像分类实验中，默认的超参数如下:<br>训练步骤为8,000,000;<br>批量尺寸为128，<br>小批量尺寸为32;<br>采用多项式衰减学习速率调度策略<br>初始学习速率为0.1，<br>热身步骤为1000;<br>momentum和weight衰减分别设置为0.9和0.005.</p><p>在BoF实验中，还增加了50%的训练步骤，验证了混合、切分、镶嵌、模糊数据增强和标签平滑正则化方法。<br>在BoS实验中，使用与默认设置相同的超参数。比较了LReLU、Swish和Mish激活函数的作用。所有实验均使用1080Ti或2080Ti GPU进行训练。</p><p>MS COCO目标检测实验中，默认的超参数为:<br>训练步骤为500500;<br>采用初始学习速率0.01的步长衰减学习速率策略，在400000步和450000步分别乘以因子0.1;<br>momentum衰减为0.9，weight衰减为0.0005。<br>所有的架构都使用一个GPU来执行批处理大小为64的多尺度训练，而小批处理大小为8或4取决于架构和GPU内存限制。</p><p>对于所有实验，只使用一个GPU训练，因此不会使用syncBN等优化多个gpu的技术。</p><h2 id="不同特征对分类器训练的影响"><a href="#不同特征对分类器训练的影响" class="headerlink" title="不同特征对分类器训练的影响"></a>不同特征对分类器训练的影响</h2><p><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/4.png" alt><br>类标签平滑、不同数据增强技术、双侧模糊、MixUp、CutMix和Mosaic的影响，以及不同激活的影响，如Leaky-ReLU(默认)、Swish和Mish。<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/5.png" alt></p><h2 id="不同特征对检测器训练的影响"><a href="#不同特征对检测器训练的影响" class="headerlink" title="不同特征对检测器训练的影响"></a>不同特征对检测器训练的影响</h2><p>进一步研究不同的Bag-of-Freebies (BoF-detector)对detector训练精度的影响，如表4所示。通过研究在不影响FPS的情况下提高检测精度的不同特征。<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/6.png" alt><br>进一步研究不同的bag-of-specials(boss-detector)对检测器训练精度的影响，包括PAN、RFB、SAM、Gaussian YOLO(G)、ASFF，如表5所示。<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/7.png" alt><br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/8.png" alt></p><h2 id="不同的backbone和预先训练的重量对检波器训练的影响"><a href="#不同的backbone和预先训练的重量对检波器训练的影响" class="headerlink" title="不同的backbone和预先训练的重量对检波器训练的影响"></a>不同的backbone和预先训练的重量对检波器训练的影响</h2><p><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/9.png" alt></p><h2 id="不同的mini-batch-size对检测器训练的影响"><a href="#不同的mini-batch-size对检测器训练的影响" class="headerlink" title="不同的mini-batch size对检测器训练的影响"></a>不同的mini-batch size对检测器训练的影响</h2><p><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/10.png" alt></p><h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><p>与目前较前沿检测模型的比较：</p><p>由于不同的方法使用不同架构的gpu进行推理时间验证，我们将yolov4运行在通常采用的Maxwell架构、Pascal架构和Volta架构的gpu上，并将其与其他最先进的方法进行比较。(见论文)<br><img src="/2020/05/17/YOLOv4-Optimal%20Speed%20and%20Accuracy%20of%20Object%20Detection%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/11.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;论文： &lt;a href=&quot;https://arxiv.org/pdf/2004.10934.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/pdf/2004.10934.pdf&lt;/a&gt;&lt;br&gt;代码： &lt;a href=&quot;https://github.com/AlexeyAB/darknet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/AlexeyAB/darknet&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="YOLOv4" scheme="http://yoursite.com/tags/YOLOv4/"/>
    
      <category term="目标检测" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="one-stage" scheme="http://yoursite.com/tags/one-stage/"/>
    
  </entry>
  
  <entry>
    <title>YOLOv3:An Incremental Improvement阅读笔记</title>
    <link href="http://yoursite.com/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-15T03:27:38.000Z</published>
    <updated>2020-05-29T02:37:36.332Z</updated>
    
    <content type="html"><![CDATA[<p>论文地址：<a href="https://pjreddie.com/media/files/papers/YOLOv3.pdf" target="_blank" rel="noopener">https://pjreddie.com/media/files/papers/YOLOv3.pdf</a><br>代码地址：<a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a>    （论文中附有）<br><a id="more"></a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>(1)YOLOv3在输入为320×320的图片上的检测速度是22 ms，mAP为28.2。这与SSD一样精确，但速度提高了三倍。<br>(2)在 Titan X上，YOLOv3在51ms内达到57.9 AP50(检测器的IOU阈值大于50)，与 RetinaNet在198 ms内的57.5 AP50相比，表现相当，但速度提高了3.8倍。</p><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><h2 id="1，边界框预测：使用维度聚类的方式生成锚框。"><a href="#1，边界框预测：使用维度聚类的方式生成锚框。" class="headerlink" title="1，边界框预测：使用维度聚类的方式生成锚框。"></a>1，边界框预测：使用维度聚类的方式生成锚框。</h2><p>训练阶段：<br>   每个边界框预测4个坐标tx，ty，tw，th。假设单元格距离图像的左上角偏移了（cx，cy），先验边界框（bounding box prior）具有宽度pw和高度ph，则预测的bbox归一化后应为：<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1.png" alt><br>1，网络为每个边界框预测4个坐标tx，ty，tw，th。<br>2，假设单元格距离图像的左上角偏移了（cx，cy）（网格为单位）<br>3，先验边界框（bounding box prior）具有宽度pw和高度ph。<br>4，bx,by,bh,bw,为归一化后的边框预测值。<br>5，xywh都归一化了，它们的值都是在0~1之间。<br>6，├ σ(t_x )使用logistic函数使其归一化在0~1之间，使得GT落在cell中。”P(t)=”1/(1+e^(−t) )<br> anchor boxes用来预测bounding box，faster rcnn中用128<em>128,256</em>256,512*512,分三个尺度变换1：1,1：2,2：1,共计9个anchor来预测框，每个anchor预测2000个框左右，使得检出率提高很多。<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2.png" alt></p><h3 id="anchor-box-机制："><a href="#anchor-box-机制：" class="headerlink" title="anchor box 机制："></a>anchor box 机制：</h3><p>用来生成bbox，共计9个anchor来预测框，使得检出率提高很多。Anchor box完全可以称之为边界框bbox。</p><h3 id="k-means聚类："><a href="#k-means聚类：" class="headerlink" title="k-means聚类："></a>k-means聚类：</h3><p>选择K个点作为初始质心。<br> repeat<br>将每个点指派到最近的质心，形成K个簇<br>重新计算每个簇的质心<br> until 簇不发生变化或达到最大迭代次数 </p><h3 id="先验框的由来："><a href="#先验框的由来：" class="headerlink" title="先验框的由来："></a>先验框的由来：</h3><p>利用 k-means 聚类方法在训练集上的bbox上来寻找先验框。pw、 ph为与groundtruth重合度最大的anchor框的宽和高。</p><h3 id="偏移量："><a href="#偏移量：" class="headerlink" title="偏移量："></a>偏移量：</h3><p>假设用width表示图片的宽，x表示bbox的横坐标(没有归一化的)。那么width/S则表示每个cell在x轴方向占了多少个pixel，再把x除以（Width/S)，假设结果为4.2，则表示新的x’相对于cell 4的左上角偏移了0.2（相当于偏移了0.2个网格）。<br>综上：k-means训练集上聚类得到9个尺寸的A.Box -&gt; 每个网格生成9个尺寸的A.Box -&gt; 其中每个网格的9个框中与groundtruth重合度最大的anchor框作为先验框。</p><h2 id="类别预测：训练过程中，使用二值交叉熵损失函数。"><a href="#类别预测：训练过程中，使用二值交叉熵损失函数。" class="headerlink" title="类别预测：训练过程中，使用二值交叉熵损失函数。"></a>类别预测：训练过程中，使用二值交叉熵损失函数。</h2><h3 id="（1）置信度定义："><a href="#（1）置信度定义：" class="headerlink" title="（1）置信度定义："></a>（1）置信度定义：</h3><p><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/3.png" alt><br>训练阶段来说，我们要给每个bounding box的confidence打label，那么这个label怎么算? 很简单，如果一个物体中心没有落在cell之内，则bounding box的 Pr(O”bj”ect)=0，IOU就不必算，因为 Pr(O”bj”ect)∗IOU_pred^truth肯定等于0，此时confidence的label就直接设置为0；如果物体的中心落在了这个cell之内，这个时候 Pr(O”bj”ect)=1，因此confidence变成了1∗IOU_pred^truth。<br>预测阶段，网络只输出一个confidence值，它实际上隐含地包含了IOU_pred^truth。</p><h3 id="输出使用sigmoid函数："><a href="#输出使用sigmoid函数：" class="headerlink" title="输出使用sigmoid函数："></a>输出使用sigmoid函数：</h3><p>“P(t)=”1/(1+e^(−t) )<br>输出    x,y,w,h    conf    class1,class2,class3,class4,class5<br>y_true    […..]    0.9    [0,0,1,0,0]<br>y_pred    […..]    0.8    [0.1,0.1,0.8,0.1,0.1]<br>分数在哪类最高即属于哪一类，sigmoid是输出。在每一类中采NMS去除多余的框以及留下同一类中不同对象的框。</p><h3 id="类别预测："><a href="#类别预测：" class="headerlink" title="类别预测："></a>类别预测：</h3><p>物体类别是一个条件概率，├ Pr(Class_i “|” O”b” ject)。<br>训练阶段，若物体中心(ground truth坐标计算)落在了这个cell，那么我们给bbox打上这个物体的类别label，并设置概率├ Pr(Class_i “|” O”b” ject)为1,这个概率是存在一个条件的，这个条件就是cell存在物体；<br>但在测试阶段，作者还把这个概率乘上了confidence，因为cell中若不含物体，则confidence为0，得确保cell中有物体（即confidence大），算类别概率才有意义。此时公式为：├ Pr(Class_i “|” O”b” ject)*( Pr(O”bj”ect)∗IOU_pred^trutℎ)。<br>若有两个概率分布p(x)和q(x)，通过q来表示p的交叉熵（损失）为：<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/4.png" alt><br>p作为正确结果(如[0，0，0，1，0，0])，把q作为预测结果(如[0.1，0.1，0.4，0.1，0.2，0.1])，就可以得到两个概率分布的交叉熵了，交叉熵值越低，表示两个概率分布越靠近。<br>    交叉熵损失函数：<br>对于样本（x,y）来讲，y是真实的标签，预测标签为所有标签的集合，我们假设有k个标签值，第i个样本预测为第K个标签的概率为pi,k，一共有N个样本：<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/5.png" alt></p><h2 id="多尺度预测：预测三种不同尺度的框。"><a href="#多尺度预测：预测三种不同尺度的框。" class="headerlink" title="多尺度预测：预测三种不同尺度的框。"></a>多尺度预测：预测三种不同尺度的框。</h2><p><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/6.png" alt></p><h2 id="特征提取器：darknet53网络："><a href="#特征提取器：darknet53网络：" class="headerlink" title="特征提取器：darknet53网络："></a>特征提取器：darknet53网络：</h2><p>使用连续的3×3和1×1卷积层，以及降低计算量的resnet。<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/7.png" alt></p><h1 id="训练结果对比"><a href="#训练结果对比" class="headerlink" title="训练结果对比"></a>训练结果对比</h1><p>我们在AP50指标上绘制准确度和速度时，我们看到YOLOv3与其他检测系统相比具有显着的优势。也就是说，速度越来越快。<br><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/8.png" alt></p><h1 id="在kitti数据集上测试"><a href="#在kitti数据集上测试" class="headerlink" title="在kitti数据集上测试"></a>在kitti数据集上测试</h1><p><img src="/2020/05/15/YOLOv3-An%20Incremental%20Improvement%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;论文地址：&lt;a href=&quot;https://pjreddie.com/media/files/papers/YOLOv3.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pjreddie.com/media/files/papers/YOLOv3.pdf&lt;/a&gt;&lt;br&gt;代码地址：&lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pjreddie.com/darknet/yolo/&lt;/a&gt;    （论文中附有）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="目标检测" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="one-stage" scheme="http://yoursite.com/tags/one-stage/"/>
    
      <category term="YOLOv3" scheme="http://yoursite.com/tags/YOLOv3/"/>
    
  </entry>
  
  <entry>
    <title>加密文1</title>
    <link href="http://yoursite.com/2020/05/06/%E5%8A%A0%E5%AF%86%E6%96%871/"/>
    <id>http://yoursite.com/2020/05/06/%E5%8A%A0%E5%AF%86%E6%96%871/</id>
    <published>2020-05-06T07:14:12.000Z</published>
    <updated>2020-05-06T07:15:57.616Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码（很简单的纯数字！）" />    <label for="pass">请输入密码（很简单的纯数字！）</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/A5HB81M963U33FzsaPnLjhKF7xB4QXjx5I6VCz0135qX5n9iEQfWxRNU9dN/3jPeCsy0/tFznvbled9wSWrjlTNVICcLq8pa5zbF3KwxeqFw6qR8KtYDOfEZRT/VJf6Zy89pSWKrG7u8nq8PrBnfm2PX13ydn7onRm3c8AhKsjGRK7ZAXbCAMqlsxuqHr8uuqCf8rbSA1YIacvgFfrU62Lhq3W7grQ2POmPQ4K3V/CEmbLaLKbLGZKp/3uO6bm+2+umV6QE723CkcKXO1clA+qQylra/y1T0E5Isg+FWeqG2JQBvCGcI/n8zPzxgjfYZNTQ3K8ORb1xLtulCofYnjgIiwf9vwaqs=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一份加密文章
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>优化yilia主题的过程</title>
    <link href="http://yoursite.com/2020/05/05/%E4%BC%98%E5%8C%96yilia%E4%B8%BB%E9%A2%98%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/05/%E4%BC%98%E5%8C%96yilia%E4%B8%BB%E9%A2%98%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2020-05-05T14:57:58.000Z</published>
    <updated>2020-05-23T03:52:01.784Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅览我优化yilia的过程，附加功能太多了，一步步填坑！</p><a id="more"></a><h1 id="Part1-网页author、标题title"><a href="#Part1-网页author、标题title" class="headerlink" title="Part1 网页author、标题title"></a>Part1 网页author、标题title</h1><h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: DurriyaDo</span><br><span class="line">subtitle: Welcome to DD<span class="string">'s GitWeb!</span></span><br><span class="line"><span class="string">description: Personal technology blog</span></span><br><span class="line"><span class="string">keywords: AI; Develpment Language; python; java; Lerning Notes... </span></span><br><span class="line"><span class="string">author: DurriyaDo</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: </span></span><br><span class="line"><span class="string">word_count: true</span></span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>1,冒号和后面一定要有空格，Site中有些选项不能随便改：<br>1) title可改 Hexo -&gt; DurriyaDo<br>2) subtitle可改，但是不能加’ ‘或者” “,否则报错：YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 8, column 12: description:<br>开始一直以为是description处没空格的原因，后来把原来的_config.yml文件重新运行，一项项对比发现是引号的错。<br>3) timezone: 建议不写或者Asia/Shanghai，我改成Asia/Wuhan 报错：TypeError: Cannot read property ‘utcOffset’ of null</p><h1 id="Part2-配置查看所有文件"><a href="#Part2-配置查看所有文件" class="headerlink" title="Part2 配置查看所有文件"></a>Part2 配置查看所有文件</h1><p>在cmd上执行如下命令，cd到blog所在的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure><p>//在全局配置文件_config.yml进行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">    meta: <span class="literal">false</span></span><br><span class="line">    pages: <span class="literal">false</span></span><br><span class="line">    posts:</span><br><span class="line">      title: <span class="literal">true</span></span><br><span class="line">      date: <span class="literal">true</span></span><br><span class="line">      path: <span class="literal">true</span></span><br><span class="line">      text: <span class="literal">false</span></span><br><span class="line">      raw: <span class="literal">false</span></span><br><span class="line">      content: <span class="literal">false</span></span><br><span class="line">      slug: <span class="literal">false</span></span><br><span class="line">      updated: <span class="literal">false</span></span><br><span class="line">      comments: <span class="literal">false</span></span><br><span class="line">      link: <span class="literal">false</span></span><br><span class="line">      permalink: <span class="literal">false</span></span><br><span class="line">      excerpt: <span class="literal">false</span></span><br><span class="line">      categories: <span class="literal">false</span></span><br><span class="line">      tags: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h1 id="Part3-设置网页的头像、链接处微信等二维码图片"><a href="#Part3-设置网页的头像、链接处微信等二维码图片" class="headerlink" title="Part3 设置网页的头像、链接处微信等二维码图片"></a>Part3 设置网页的头像、链接处微信等二维码图片</h1><p>添加图片资源文件夹。 路径为 themes/yilia/source/下，添加一个 assets/img 文件夹，里面存放图片<br>配置文件中直接引用即可。路径为 themes/yilia/_config.yml，找到如下：</p><h2 id="微信二维码图片"><a href="#微信二维码图片" class="headerlink" title="微信二维码图片"></a>微信二维码图片</h2><p>weixin:  /assets/img/wechat.png</p><h2 id="头像图片"><a href="#头像图片" class="headerlink" title="头像图片"></a>头像图片</h2><p>avatar:  /assets/img/head.jpg</p><h2 id="网页图标"><a href="#网页图标" class="headerlink" title="网页图标"></a>网页图标</h2><p>favicon:  /assets/img/head.jpg</p><h1 id="Part4-文章只显示摘要"><a href="#Part4-文章只显示摘要" class="headerlink" title="Part4 文章只显示摘要"></a>Part4 文章只显示摘要</h1><p>在MD 格式文章正文插入 <!-- more -->即可，只会显示它之前的，此后的就不显示，点击文章标题，全文阅读才可看到，并在themes/yilia/_config.yml，进行以下注释：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># excerpt_link: more</span></span><br></pre></td></tr></table></figure></p><h1 id="Part5-增加归档菜单"><a href="#Part5-增加归档菜单" class="headerlink" title="Part5 增加归档菜单"></a>Part5 增加归档菜单</h1><p>修改 themes/yilia/_config.yml</p><p>menu:<br>    主页:  /<br>    归档:  /archives/index.html</p><h1 id="Part6-添加统计-不蒜子-amp-字数统计"><a href="#Part6-添加统计-不蒜子-amp-字数统计" class="headerlink" title="Part6 添加统计(不蒜子&amp;字数统计)"></a>Part6 添加统计(不蒜子&amp;字数统计)</h1><h2 id="总体统计"><a href="#总体统计" class="headerlink" title="总体统计"></a>总体统计</h2><p>1) 找到themes\yilia\layout_partial\after-footer.ejs,添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2) 找到themes\yilia\layout_partial\footer.ejs，在 ‘ div class=”footer-right” ‘ 标签内添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="comment"># PV方式，单个用户连续点击 n 篇，记录 n 次记录值 --&gt;</span></span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt; 总访问量: &lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt; /&lt;/span&gt;</span><br><span class="line">&lt;!-- <span class="comment"># UV方式，单个用户连续点击 n 篇，记录 1 次记录值 --&gt;</span></span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_uv"</span>&gt;  访客数:&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="文章统计"><a href="#文章统计" class="headerlink" title="文章统计"></a>文章统计</h2><p>找到themes\yilia\layout_partial\post\nav.ejs，大概在27行左右，加上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"busuanzi_container_page_pv"</span>&gt;</span><br><span class="line">        本文阅读量: &lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;&lt;/span&gt;次</span><br><span class="line"> &lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="字数、阅读时长统计"><a href="#字数、阅读时长统计" class="headerlink" title="字数、阅读时长统计"></a>字数、阅读时长统计</h2><p>打开博客根目录、安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -save hexo-wordcount</span><br></pre></td></tr></table></figure><p>博客根目录_config.yml添加配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word_count: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>找到themes\yilia\layout_partial\article.ejs,在第七行左右，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(<span class="string">'post/word'</span>) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>最后在themes\yilia\layout_partial\post目录下新建word.ejs,内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"margin-top:10px;"</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &lt;span class=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">"fa fa-keyboard-o"</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-meta-item-text"</span> style=<span class="string">"font-size: 16px;color: grey"</span>&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;!--这里样式可以自己定制--&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-count"</span> style=<span class="string">"font-size: 16px;color: grey"</span>&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span class=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">"fa fa-hourglass-half"</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-meta-item-text"</span> style=<span class="string">"font-size: 16px;color: grey"</span>&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-count"</span> style=<span class="string">"font-size: 16px;color: grey"</span>&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h2><p>上述操作之后，我的网页在中文部分出现了乱码，找了很多原因，最后发现notepad++中应该设置成UTF-8编码的方式！所以我们应该先确保（设置）文件是UTF-8的形式，然后再进行上述三小步的操作，看此时文件中 中文字不是乱码（就是中文），然后再执行hexo g等操作！</p><h1 id="Part7-制作滑动白色目录"><a href="#Part7-制作滑动白色目录" class="headerlink" title="Part7 制作滑动白色目录"></a>Part7 制作滑动白色目录</h1><h2 id="修改css文件："><a href="#修改css文件：" class="headerlink" title="修改css文件："></a>修改css文件：</h2><p>themes\yilia\source\路径下找到main.xxxxx.css，在最后添加代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#container .show-toc-btn,#container .toc-article&#123;display:block&#125;</span></span><br><span class="line">.toc-article&#123;z-index:100;background:<span class="comment">#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px&#125;.toc-article .toc-close&#123;font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc&#125;.toc-article .toc-close:hover&#123;color:#000&#125;.toc-article .toc&#123;font-size:12px;padding:0;line-height:20px&#125;.toc-article .toc .toc-number&#123;color:#333&#125;.toc-article .toc .toc-text:hover&#123;text-decoration:underline;color:#2a6496&#125;.toc-article li&#123;list-style-type:none&#125;.toc-article .toc-level-1&#123;margin:4px 0&#125;.toc-article .toc-child&#123;&#125;@-moz-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-webkit-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-o-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;.show-toc-btn&#123;display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9&#125;.show-toc-btn .btn-bg&#123;margin-top:2px;display:block;width:16px;height:14px;background:url(https://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%&#125;.show-toc-btn .btn-text&#123;color:#999;font-size:12px&#125;.show-toc-btn:hover&#123;cursor:pointer&#125;.show-toc-btn:hover .btn-bg&#123;background-position:0 -16px&#125;.show-toc-btn:hover .btn-text&#123;font-size:12px;color:#ea8010&#125;</span></span><br><span class="line">.toc-article li ol, .toc-article li ul &#123;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.toc-article ol, .toc-article ul &#123;</span><br><span class="line">    margin: 10px 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改ejs文件："><a href="#修改ejs文件：" class="headerlink" title="修改ejs文件："></a>修改ejs文件：</h2><p>找到themes\yilia\layout_partial\article.ejs,</p><p>在 &lt;/header&gt; &lt;% } %&gt;下面加入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 目录内容 --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.toc)&#123; %&gt;</span><br><span class="line">    &lt;p class=<span class="string">"show-toc-btn"</span> id=<span class="string">"show-toc-btn"</span> onclick=<span class="string">"showToc();"</span> style=<span class="string">"display:none"</span>&gt;</span><br><span class="line">          &lt;span class=<span class="string">"btn-bg"</span>&gt;&lt;/span&gt;</span><br><span class="line">          &lt;span class=<span class="string">"btn-text"</span>&gt;文章导航&lt;/span&gt;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">&lt;div id=<span class="string">"toc-article"</span> class=<span class="string">"toc-article"</span>&gt;</span><br><span class="line">    &lt;span id=<span class="string">"toc-close"</span> class=<span class="string">"toc-close"</span> title=<span class="string">"隐藏导航"</span> onclick=<span class="string">"showBtn();"</span>&gt;×&lt;/span&gt;</span><br><span class="line">&lt;strong class=<span class="string">"toc-title"</span>&gt;文章目录&lt;/strong&gt;</span><br><span class="line">           &lt;%- toc(post.content) %&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">   &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showToc</span></span>()&#123;</span><br><span class="line">var toc_article = document.getElementById(<span class="string">"toc-article"</span>);</span><br><span class="line">var show_toc_btn = document.getElementById(<span class="string">"show-toc-btn"</span>);</span><br><span class="line">toc_article.setAttribute(<span class="string">"style"</span>,<span class="string">"display:block"</span>);</span><br><span class="line">show_toc_btn.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showBtn</span></span>()&#123;</span><br><span class="line">var toc_article = document.getElementById(<span class="string">"toc-article"</span>);</span><br><span class="line">var show_toc_btn = document.getElementById(<span class="string">"show-toc-btn"</span>);</span><br><span class="line">toc_article.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none"</span>);</span><br><span class="line">show_toc_btn.setAttribute(<span class="string">"style"</span>,<span class="string">"display:block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">&lt;!-- 目录内容结束 --&gt;</span><br></pre></td></tr></table></figure><br>对应每篇文章的md文件，开头加上toc: true属性就行。</p><h1 id="Part8-制作多级目录"><a href="#Part8-制作多级目录" class="headerlink" title="Part8 制作多级目录"></a>Part8 制作多级目录</h1><p>开始一直不知道哪里出了问题，后来通过对比发现markdown文件的语法是：</p><blockquote><p>“#” 表示一级目录<br>“##” 表示二级目录<br>“###” 表示三级目录<br>且上述示范#、##或者###后面必须有空格，再接标题题目！</p></blockquote><h2 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h2><p>我将themes/yilia/_config.yml文件中的toc: 1 改成了 toc: 0(不显示目录)，这样的话，在part7的基础上，我们就可以只看到白色蓝字的目录了，不会和之前的目录重复，画面更简洁！</p><h1 id="Part9-点击爱心效果"><a href="#Part9-点击爱心效果" class="headerlink" title="Part9 点击爱心效果"></a>Part9 点击爱心效果</h1><p>1) 新建js文件：<br>yilia\source\asset路径下新建clicklove.js,内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">! <span class="keyword">function</span> (e, t, a) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">n</span></span>() &#123;</span><br><span class="line">        c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>), o(), r()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">r</span></span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = <span class="string">"left:"</span> + d[e].x + <span class="string">"px;top:"</span> + d[e].y + <span class="string">"px;opacity:"</span> + d[e].alpha + <span class="string">";transform:scale("</span> + d[e].scale + <span class="string">","</span> + d[e].scale + <span class="string">") rotate(45deg);background:"</span> + d[e].color + <span class="string">";z-index:99999"</span>);</span><br><span class="line">        requestAnimationFrame(r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">o</span></span>() &#123;</span><br><span class="line">        var t = <span class="string">"function"</span> == typeof e.onclick &amp;&amp; e.onclick;</span><br><span class="line">        e.onclick = <span class="keyword">function</span> (e) &#123;</span><br><span class="line">            t &amp;&amp; t(), i(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> i(e) &#123;</span><br><span class="line">        var a = t.createElement(<span class="string">"div"</span>);</span><br><span class="line">        a.className = <span class="string">"heart"</span>, d.push(&#123;</span><br><span class="line">            el: a,</span><br><span class="line">            x: e.clientX - 5,</span><br><span class="line">            y: e.clientY - 5,</span><br><span class="line">            scale: 1,</span><br><span class="line">            alpha: 1,</span><br><span class="line">            color: s()</span><br><span class="line">        &#125;), t.body.appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> c(e) &#123;</span><br><span class="line">        var a = t.createElement(<span class="string">"style"</span>);</span><br><span class="line">        a.type = <span class="string">"text/css"</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            a.appendChild(t.createTextNode(e))</span><br><span class="line">        &#125; catch (t) &#123;</span><br><span class="line">            a.styleSheet.cssText = e</span><br><span class="line">        &#125;</span><br><span class="line">        t.getElementsByTagName(<span class="string">"head"</span>)[0].appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">s</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"rgb("</span> + ~~(255 * Math.random()) + <span class="string">","</span> + ~~(255 * Math.random()) + <span class="string">","</span> + ~~(255 * Math.random()) + <span class="string">")"</span></span><br><span class="line">    &#125;</span><br><span class="line">    var d = [];</span><br><span class="line">    e.requestAnimationFrame = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="keyword">function</span> (e) &#123;</span><br><span class="line">            setTimeout(e, 1e3 / 60)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(), n()</span><br><span class="line">&#125;(window, document);</span><br></pre></td></tr></table></figure><p>2) 修改ejs文件：<br>找到themes\yilia\layout_partial\after-footer.ejs,添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/assets/clicklove.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">//注意：这里的路径要对应之前创建clicklove.ejs的地方</span><br></pre></td></tr></table></figure><h1 id="Part10-刷新自动生成个性签名"><a href="#Part10-刷新自动生成个性签名" class="headerlink" title="Part10 刷新自动生成个性签名"></a>Part10 刷新自动生成个性签名</h1><p>1) 找到themes\yilia\layout_partial\left-col.ejs文件<br>(大概12行，theme.subtitle属性内):把<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=<span class="string">"header-subtitle"</span>&gt;&lt;%=theme.subtitle%&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"hitokoto"</span>&gt;:D 获取中...&lt;/p&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto"</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Part11-文章加密"><a href="#Part11-文章加密" class="headerlink" title="Part11 文章加密"></a>Part11 文章加密</h1><h2 id="引入加密插件encrypt"><a href="#引入加密插件encrypt" class="headerlink" title="引入加密插件encrypt"></a>引入加密插件encrypt</h2><p>1) 找到博客根目录下的package.json,最下面添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hexo-blog-encrypt"</span>: <span class="string">"2.0.*"</span></span><br></pre></td></tr></table></figure></p><p>2) cmd进入博客根目录，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>找到根目录下的_config.yml文件，添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="加密文章的配置"><a href="#加密文章的配置" class="headerlink" title="加密文章的配置"></a>加密文章的配置</h2><p>在需要加密的文章.md文件开头写入：</p><hr><p>title: 加密文章<br>date: 2019-05-30 22:02:07<br>password: 这里填密码<br>abstract: 这里是博客简述（能被访客看见）</p><h2 id="message-输入密码提示语句（例如：请输入密码）"><a href="#message-输入密码提示语句（例如：请输入密码）" class="headerlink" title="message: 输入密码提示语句（例如：请输入密码）"></a>message: 输入密码提示语句（例如：请输入密码）</h2><h1 id="Part11-添加RSS"><a href="#Part11-添加RSS" class="headerlink" title="Part11 添加RSS"></a>Part11 添加RSS</h1><p>1、安装插件：<br>npm install —save hexo-generator-feed</p><p>2、在根目录的_config.yml添加:</p><h1 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h1><p>  plugins: hexo-generater-feed</p><p>3、修改主题目录下的_config.yml<br>在subnav:里面添加：</p><p>  rss: ‘/atom.xml’</p><h1 id="Part12-上传README-md文件"><a href="#Part12-上传README-md文件" class="headerlink" title="Part12 上传README.md文件"></a>Part12 上传README.md文件</h1><p>1、在博客根目录的source文件夹内，新建README.md文件<br>2、在博客根目录的_config.yml里修改配置：</p><p>//hexo部署页面的时候会默认把source目录下的.md文件渲染成html,所以需要跳过README.md的渲染。</p><h1 id="Part12-添加网易云音乐"><a href="#Part12-添加网易云音乐" class="headerlink" title="Part12 添加网易云音乐"></a>Part12 添加网易云音乐</h1><p>1、 打开网易云音乐首页，然后搜索你要添加的背景音乐<br>    <a href="http://music.163.com/" target="_blank" rel="noopener">http://music.163.com/</a></p><p>2、 搜索到歌曲点击生成外链播放器，进去下一个界面<br>3、 复制外链播放器的代码<br>打开yilia主题下的_partial文件夹下的left-col.ejs文件<br>复制文件内容到最下端</p><p>把代码放在div框<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"position:absolute; bottom:120px left:auto; width:85%"</span>&gt;</span><br><span class="line">&lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=260 height=86 src=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=422428548&amp;auto=1&amp;height=66"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Part13-添加评论"><a href="#Part13-添加评论" class="headerlink" title="Part13 添加评论"></a>Part13 添加评论</h1><p>1、创建gitalk.ejs<br>在你的hexo目录/theme/yilia/layout/_partial/post/目录下创建gitalk.ejs并写入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"gitalk-container"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: <span class="string">'&lt;%=theme.gitalk.clientID%&gt;'</span>,</span><br><span class="line">  clientSecret: <span class="string">'&lt;%=theme.gitalk.clientSecret%&gt;'</span>,</span><br><span class="line">  repo: <span class="string">'&lt;%=theme.gitalk.repo%&gt;'</span>,</span><br><span class="line">  owner: <span class="string">'&lt;%=theme.gitalk.owner%&gt;'</span>,</span><br><span class="line">  admin: [<span class="string">'&lt;%=theme.gitalk.admin%&gt;'</span>],</span><br><span class="line">  id: md5(window.location.pathname),</span><br><span class="line">  distractionFreeMode: &lt;%=theme.gitalk.distractionFreeMode%&gt;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>2、修改article.ejs<br>在你的hexo目录/theme/yilia/layout/_partial/article.ejs文件中最后一行“&lt;% } %&gt;”之前添加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.gitalk.enable &amp;&amp; theme.gitalk.distractionFreeMode)&#123; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/gitalk'</span>, &#123;</span><br><span class="line">      key: post.slug,</span><br><span class="line">      title: post.title,</span><br><span class="line">      url: config.url+url_for(post.path)</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>3、添加配置文件<br>在yilia的配置文件_config.yml中gitment配置下面添加如下配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6. Gitalk</span></span><br><span class="line">gitalk: </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>    <span class="comment">#用来做启用判断可以不用</span></span><br><span class="line">  clientID: <span class="string">'your clientID'</span>    <span class="comment">#Github上生成的</span></span><br><span class="line">  clientSecret: <span class="string">'your clientSecret'</span>   <span class="comment">#同上</span></span><br><span class="line">  repo: git_comment    <span class="comment">#评论所在的github project</span></span><br><span class="line">  owner: findtheonlyway    <span class="comment">#github用户名</span></span><br><span class="line">  admin: erbiduo    <span class="comment">#可以初始化评论issue的github账户名称</span></span><br><span class="line">  distractionFreeMode: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h1 id="Part14-生成fork-me-on-github链接："><a href="#Part14-生成fork-me-on-github链接：" class="headerlink" title="Part14 生成fork me on github链接："></a>Part14 生成fork me on github链接：</h1><p>打开yilia\layout\layout.ejs文件，在下面图片的位置添加相应的代码，如果要修改颜色，可以到这里去拷贝对应颜色的图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=<span class="string">"fork"</span> href=<span class="string">"https://github.com/you"</span>&gt;&lt;img width=<span class="string">"149"</span> height=<span class="string">"149"</span> src=<span class="string">"https://github.blog/wp-content/uploads/2008/12/forkme_right_gray_6d6d6d.png?resize=149%2C149"</span> class=<span class="string">"attachment-full size-full"</span> alt=<span class="string">"Fork me on GitHub"</span> data-recalc-dims=<span class="string">"1"</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.fork&#123;display:none;&#125;</span><br><span class="line">.fork&#123;</span><br><span class="line">position:fixed;</span><br><span class="line">z-index:999;</span><br><span class="line">top:0;</span><br><span class="line">right:.5em</span><br><span class="line">&#125;</span><br><span class="line">@media(min-width:768px)&#123;.fork&#123;display:inline;&#125;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Part15-设置左边框背景"><a href="#Part15-设置左边框背景" class="headerlink" title="Part15 设置左边框背景"></a>Part15 设置左边框背景</h1><p>参考：<a href="https://blog.csdn.net/qq_40922859/article/details/102886979" target="_blank" rel="noopener">https://blog.csdn.net/qq_40922859/article/details/102886979</a></p><h1 id="Part16-智能菜单-背景渐变"><a href="#Part16-智能菜单-背景渐变" class="headerlink" title="Part16 智能菜单-背景渐变"></a>Part16 智能菜单-背景渐变</h1><p>参考：<a href="https://anyway1314.cn/post/47a80fd0.html" target="_blank" rel="noopener">https://anyway1314.cn/post/47a80fd0.html</a></p><h1 id="Part17-更改左侧昵称字体"><a href="#Part17-更改左侧昵称字体" class="headerlink" title="Part17 更改左侧昵称字体"></a>Part17 更改左侧昵称字体</h1><p>在 themes\yilia\source\main.0cf68a.css 文件里面修改，找到 header-author ，修改里面的 font-family ，改成：</p><p>font-family:”Times New Roman”,Georgia,Serif</p><h1 id="Part18-在HEXO主题中添加数学公式支持"><a href="#Part18-在HEXO主题中添加数学公式支持" class="headerlink" title="Part18 在HEXO主题中添加数学公式支持"></a>Part18 在HEXO主题中添加数学公式支持</h1><p>参考： <a href="https://www.cnblogs.com/zhyantao/p/10424874.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhyantao/p/10424874.html</a></p><p>TIPS:<br>参考网址：<br>1，<a href="https://blog.csdn.net/qq_40922859/article/details/97035497" target="_blank" rel="noopener">https://blog.csdn.net/qq_40922859/article/details/97035497</a><br>2，<a href="https://blog.csdn.net/dta0502/article/details/89607895" target="_blank" rel="noopener">https://blog.csdn.net/dta0502/article/details/89607895</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎阅览我优化yilia的过程，附加功能太多了，一步步填坑！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="yilia" scheme="http://yoursite.com/tags/yilia/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>创建Git博客的过程</title>
    <link href="http://yoursite.com/2020/05/04/%E5%88%9B%E5%BB%BAGit%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/04/%E5%88%9B%E5%BB%BAGit%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2020-05-04T15:22:18.000Z</published>
    <updated>2020-05-29T02:39:03.464Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎阅览我搭建git博客的过程，踩了很多坑，还好最后成功了！</p><a id="more"></a><h2 id="Part-1-基本配置"><a href="#Part-1-基本配置" class="headerlink" title="Part 1 基本配置"></a>Part 1 基本配置</h2><h3 id="下载工作"><a href="#下载工作" class="headerlink" title="下载工作"></a>下载工作</h3><p>1，下载git（在桌面终端完成即可）</p><h3 id="配置工作"><a href="#配置工作" class="headerlink" title="配置工作"></a>配置工作</h3><p>2，配置仓库（需要提前注册一个github账号）</p><hr><h2 id="Part-2-hexo执行命令"><a href="#Part-2-hexo执行命令" class="headerlink" title="Part 2 hexo执行命令"></a>Part 2 hexo执行命令</h2><p>1，下载node.js<br>2，在自己的笔记本安排一个文件夹，放置自己的本地博客<br>3，cd 到上一步的本地博客文件夹，并利用node安装hexo：<br>4，安装好之后，执行以下命令：</p><pre><code class="lang-bash">$ hexo init (初始化博客,他会自动帮你下载初始的hexo界面)</code></pre><pre><code class="lang-bash">$ hexo s (= hexo server 出现一个http://localhost：4000 的网址，在本地浏览器中打开该网址，有初始的博客界面)</code></pre><p>5，写第一篇博客</p><pre><code class="lang-bash">$ hexo n &quot;我的第一篇博客&quot;(= hexo new &quot;...&quot; 写博客)</code></pre><p>可在命令行窗口中利用vim写，也可以在notepad++等软件中写</p><p>6，生成、部署到Github</p><pre><code class="lang-bash">$ hexo clean</code></pre><pre><code class="lang-bash">$ hexo g (= hexo generate)</code></pre><pre><code class="lang-bash">$ hexo s (在本地查看效果)</code></pre><pre><code class="lang-bash">$ cnpm install --save hexo-deployer-git</code></pre><pre><code class="lang-bash">$ hexo d</code></pre><p> 部署成功之后即可在浏览器中输入自己的github网址：eg.DurriyaDo.github.io看到效果</p><hr><h2 id="Part-3-更换hexo主题"><a href="#Part-3-更换hexo主题" class="headerlink" title="Part 3 更换hexo主题"></a>Part 3 更换hexo主题</h2><p>我下载的是yilia主题：</p><pre><code class="lang-bash">$ git clone https://github.com/litten/hexo-git themes/yilia (放到自己的blog/themes/yilia下面)</code></pre><p>重复上述步骤：</p><pre><code class="lang-bash">$ hexo clean</code></pre><pre><code class="lang-bash">$ hexo g</code></pre><pre><code class="lang-bash">$ hexo s</code></pre><pre><code class="lang-bash">$ hexo d</code></pre><p>完成上述步骤即可在自己的github网址查看</p><hr><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p>1，<a href="https://www.bilibili.com/video/BV1A4411G7SF?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1A4411G7SF?p=3</a><br>2，<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=16373546033576789607" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=16373546033576789607</a></p><hr><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>1，github上生成真的需要等一段时间才能刷新出来，不要着急！！<br>2，我开始在blog下打开git bash窗口，前面很成功，但是换了主题之后一直打不开，不论本地还是浏览器网页，后来删除仓库，在windows窗口下从头执行上述命令，成功了！<br>3，失败了就把blog和仓库删除，从头弄起，不要害怕！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎阅览我搭建git博客的过程，踩了很多坑，还好最后成功了！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="创建" scheme="http://yoursite.com/tags/%E5%88%9B%E5%BB%BA/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/30/hello-world/"/>
    <id>http://yoursite.com/2020/04/30/hello-world/</id>
    <published>2020-04-30T14:49:07.432Z</published>
    <updated>2020-05-06T07:13:43.993Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
